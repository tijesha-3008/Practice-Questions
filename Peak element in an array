//cases of multiple peaks and duplicates covered

#include <iostream>
#include <bits/stdc++.h>
using namespace std;

    int findPeakElement(vector<int> &arr) {
    int n = arr.size(); 
    if (n == 1) return 0;
    if (arr[0] >= arr[1]) return 0;
    if (arr[n - 1] >= arr[n - 2]) return n - 1;

    int low = 1, high = n - 2;
    while (low <= high) {
        int mid = (low + high) / 2;
        int pos1=mid-1,pos2=mid+1;
        for(int i=mid-1;i>0;i--) 
        {
        if(arr[mid]==arr[i]) continue;
        else {pos1=i; break;}
        }
        for(int i=mid+1;i<n-1;i++){
            if(arr[mid]==arr[i]) continue;
            else {pos2=i; break;}
        }
        if (arr[mid - 1] < arr[mid] && arr[mid] > arr[mid + 1])
            return mid;

        
        else if (arr[mid] > arr[pos1]) low = mid + 1;
        
        else  high = mid - 1;
    }
    
    return -1;
}
    int main() {
   	//vector<int>v={1,5,1,2,1};
    vector<int>v={1,2,3,3,3,3,3,4,2,1};
	cout<< findPeakElement(v);
	return 0;
}
